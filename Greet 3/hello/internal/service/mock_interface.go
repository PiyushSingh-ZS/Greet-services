// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockName is a mock of Name interface.
type MockName struct {
	ctrl     *gomock.Controller
	recorder *MockNameMockRecorder
}

// MockNameMockRecorder is the mock recorder for MockName.
type MockNameMockRecorder struct {
	mock *MockName
}

// NewMockName creates a new mock instance.
func NewMockName(ctrl *gomock.Controller) *MockName {
	mock := &MockName{ctrl: ctrl}
	mock.recorder = &MockNameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockName) EXPECT() *MockNameMockRecorder {
	return m.recorder
}

// Greet mocks base method.
func (m *MockName) Greet(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Greet", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Greet indicates an expected call of Greet.
func (mr *MockNameMockRecorder) Greet(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Greet", reflect.TypeOf((*MockName)(nil).Greet), name)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Greet mocks base method.
func (m *MockService) Greet(ctx *gofr.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Greet", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Greet indicates an expected call of Greet.
func (mr *MockServiceMockRecorder) Greet(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Greet", reflect.TypeOf((*MockService)(nil).Greet), ctx, name)
}
